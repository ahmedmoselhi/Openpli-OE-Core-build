--- e2openplugin-OpenWebif.orig/plugin/controllers/models/grab.py	2018-04-05 07:40:43.449545117 +0200
+++ e2openplugin-OpenWebif/plugin/controllers/models/grab.py	2018-04-05 07:43:58.653211156 +0200
@@ -9,83 +9,90 @@
 #                                                                            #
 ##############################################################################
 from enigma import eConsoleAppContainer
-from twisted.web import resource, server
+from twisted.web import static, resource, http, server
+import os
 import time
 
 GRAB_PATH = '/usr/bin/grab'
 
+class grabScreenshot(resource.Resource):
+	def __init__(self,session, path = ""):
+		resource.Resource.__init__(self)
+		self.session = session
+		self.container = eConsoleAppContainer()
+		self.container.appClosed.append(self.grabFinished)
+		# self.container.dataAvail.append(self.grabData)
 
-class GrabRequest(object):
-	def __init__(self, request, session):
+	def render(self, request):
 		self.request = request
+		graboptions = [GRAB_PATH]
 
-		graboptions = [GRAB_PATH, '-q', '-s']
-
-		if "format" in request.args:
-			fileformat = request.args["format"][0]
+		if "format" in request.args.keys():
+			self.fileformat = request.args["format"][0]
 		else:
-			fileformat = "jpg"
-		if fileformat == "jpg":
+			self.fileformat = "jpg"
+
+		if self.fileformat == "jpg":
 			graboptions.append("-j")
 			graboptions.append("95")
-		elif fileformat == "png":
+		elif self.fileformat == "png":
 			graboptions.append("-p")
-		elif fileformat != "bmp":
-			fileformat = "bmp"
+		elif self.fileformat != "bmp":
+			self.fileformat = "bmp"
 
-		if "r" in request.args:
+		if "r" in request.args.keys():
 			size = request.args["r"][0]
 			graboptions.append("-r")
 			graboptions.append("%d" % int(size))
 
-		if "mode" in request.args:
+		if "mode" in request.args.keys():
 			mode = request.args["mode"][0]
 			if mode == "osd":
 				graboptions.append("-o")
 			elif mode == "video":
 				graboptions.append("-v")
-		self.container = eConsoleAppContainer()
-		self.container.appClosed.append(self.grabFinished)
-		self.container.stdoutAvail.append(request.write)
-		self.container.setBufferSize(32768)
-		self.container.execute(GRAB_PATH, *graboptions)
+
 		try:
-			ref = session.nav.getCurrentlyPlayingServiceReference().toString()
-			sref = '_'.join(ref.split(':', 10)[:10])
-		except:  # noqa: E722
-			sref = 'screenshot'
-		sref = sref + '_' + time.strftime("%Y%m%d%H%M%S", time.localtime(time.time()))
-		request.notifyFinish().addErrback(self.requestAborted)
-		request.setHeader('Content-Disposition', 'inline; filename=%s.%s;' % (sref, fileformat))
-		request.setHeader('Content-Type', 'image/%s' % fileformat.replace("jpg", "jpeg"))
-		request.setHeader('Expires', 'Sat, 26 Jul 1997 05:00:00 GMT')
-		request.setHeader('Cache-Control', 'no-store, no-cache, must-revalidate, post-check=0, pre-check=0')
-		request.setHeader('Pragma', 'no-cache')
-
-	def requestAborted(self, err):
-		# Called when client disconnected early, abort the process and
-		# don't call request.finish()
-		del self.container.appClosed[:]
-		self.container.kill()
-		del self.request
-		del self.container
+			ref = self.session.nav.getCurrentlyPlayingServiceReference().toString()
+		except:
+			ref = None 
+
+		if ref is not None:
+			self.sref = '_'.join(ref.split(':', 10)[:10])
+		else:
+			self.sref = 'screenshot'
 
-	def grabFinished(self, retval=None):
+		self.sref = self.sref + '_' + time.strftime("%Y%m%d%H%M%S", time.localtime(time.time()))
+		self.filepath = "/tmp/screenshot." + self.fileformat
+		graboptions.append(self.filepath)
+		self.container.execute(GRAB_PATH, *graboptions)
+		return server.NOT_DONE_YET
+
+	def grabData(self, data):
+		print "[W] grab:", data,
+
+	def grabFinished(self, retval = None):
+		fileformat = self.fileformat
+		if fileformat == "jpg":
+			fileformat = "jpeg"
+		try:
+			fd = open(self.filepath)
+			data = fd.read()
+			fd.close()
+			self.request.setHeader('Content-Disposition', 'inline; filename=%s.%s;' % (self.sref,self.fileformat))
+			self.request.setHeader('Content-Type','image/%s' % fileformat)
+			self.request.setHeader('Content-Length', '%i' % len(data))
+			self.request.write(data)
+		except Exception, error:
+			self.request.setResponseCode(http.OK)
+			self.request.write("Error creating screenshot:\n %s" % error)
+		try:
+			os.unlink(self.filepath)
+		except:
+			print "Failed to remove:", self.filepath
 		try:
 			self.request.finish()
 		except RuntimeError, error:
 			print "[OpenWebif] grabFinished error: %s" % error
-		# Break the chain of ownership
 		del self.request
-
-
-class grabScreenshot(resource.Resource):
-	def __init__(self, session, path=None):
-		resource.Resource.__init__(self)
-		self.session = session
-
-	def render(self, request):
-		# Add a reference to the grabber to the Request object. This keeps
-		# the object alive at least until the request finishes
-		request.grab_in_progress = GrabRequest(request, self.session)
-		return server.NOT_DONE_YET
+		del self.filepath
