diff -Naur git/player2_191/linux/drivers/media/dvb/stm/dvb/dvb_video.c git.new/player2_191/linux/drivers/media/dvb/stm/dvb/dvb_video.c
--- git/player2_191/linux/drivers/media/dvb/stm/dvb/dvb_video.c	2015-05-06 21:24:29.466591311 +0200
+++ git.new/player2_191/linux/drivers/media/dvb/stm/dvb/dvb_video.c	2015-05-06 21:24:02.790938993 +0200
@@ -1187,6 +1187,7 @@
 	struct DeviceContext_s*     Context         = (struct DeviceContext_s*)DvbDevice->priv;
 	struct DvbContext_s*        DvbContext      = Context->DvbContext;
 	DVB_DEBUG("Id %d\n", Context->Id);
+/*
 	if ((File->f_flags & O_ACCMODE) != O_RDONLY)
 	{
 		mutex_lock(&(DvbContext->Lock));
@@ -1194,7 +1195,7 @@
 		{
 			unsigned int    MutexIsLocked       = true;
 			/* Discard previously injected data to free the lock. */
-			DvbStreamDrain(Context->VideoStream, true);
+/*			DvbStreamDrain(Context->VideoStream, true);
 			if (mutex_lock_interruptible(Context->ActiveVideoWriteLock) != 0)
 				MutexIsLocked           = false;
 			DvbPlaybackRemoveStream(Context->Playback, Context->VideoStream);
@@ -1204,14 +1205,14 @@
 		}
 		DvbDisplayDelete(BACKEND_VIDEO_ID, Context->Id);
 		/* Check to see if audio and demux have also finished so we can release the playback */
-		if ((Context->AudioStream == NULL) && (Context->DemuxStream == NULL) && (Context->Playback != NULL))
+/*		if ((Context->AudioStream == NULL) && (Context->DemuxStream == NULL) && (Context->Playback != NULL))
 		{
 			/* Check to see if our playback has already been deleted by the demux context */
-			if (Context->DemuxContext->Playback != NULL)
+/*			if (Context->DemuxContext->Playback != NULL)
 			{
 				/* Try and delete playback then set our demux to Null if successful or not.  If we fail someone else
 				   is still using it but we are done with it. */
-				if (DvbPlaybackDelete(Context->Playback) == 0)
+/*				if (DvbPlaybackDelete(Context->Playback) == 0)
 					DVB_DEBUG("Playback deleted successfully\n");
 			}
 			Context->Playback                   = NULL;
@@ -1224,6 +1225,7 @@
 		VideoInit(Context);
 		mutex_unlock(&(DvbContext->Lock));
 	}
+*/
 	return dvb_generic_release(Inode, File);
 }
 /*}}}*/
